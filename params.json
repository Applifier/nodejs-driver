{"name":"DataStax Node.js Driver for Apache Cassandra","tagline":"DataStax Node.js Driver for Apache Cassandra","body":"ï»¿# DataStax Node.js Driver for Apache Cassandra\r\n\r\nNode.js driver for [Apache Cassandra][cassandra]. This driver works exclusively with the Cassandra Query Language version 3 (CQL3) and Cassandra's native protocol.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install cassandra-driver\r\n```\r\n\r\n## Features\r\n\r\n- Nodes discovery\r\n- Configurable load balancing\r\n- Transparent failover\r\n- Tunability\r\n- Row streaming\r\n- Prepared statements and query batches\r\n\r\n## Basic usage\r\n\r\n```javascript\r\nvar driver = require('cassandra-driver');\r\nvar client = new driver.Client({contactPoints: ['host1', 'host2'], keyspace: 'ks1'});\r\nvar query = 'SELECT email, last_name FROM user_profiles WHERE key=?';\r\nclient.execute(query, ['guy'], function(err, result) {\r\n  console.log('got user profile with email ' + result.rows[0].email);\r\n});\r\n```\r\n\r\n## Getting Help\r\n\r\nYou can use the project [Mailing list][mailinglist] or create a ticket on the [Jira issue tracker][jira].\r\n\r\n## API\r\n\r\n- [Client](#client) class\r\n- [types](#types) module\r\n- [policies](#policies) module\r\n- [auth](#auth) module\r\n\r\n\r\n### Client\r\n\r\nThe `Client` maintains a pool of opened connections to the hosts to avoid several time-consuming steps that are involved with the setup of a CQL binary protocol connection (socket connection, startup message, authentication, ...).\r\n\r\n*Usually you need one Client instance per Cassandra cluster.*\r\n\r\n#### new Client(options)\r\n\r\nConstructs a new client object.\r\n\r\n#### client.connect([callback])\r\n\r\nConnects / warms up the pool.\r\n\r\nIt ensures the pool is connected. It is not required to call it, internally the driver will call to `connect` when executing a query.\r\n\r\nThe optional `callback` parameter will be executed when the pool is connected. If the pool is already connected, it will be called instantly. \r\n\r\n#### client.execute(query, [params], [queryOptions], callback)\r\n\r\nThe `query` is the cql query to execute, with `?` marker for parameter placeholder.\r\n\r\nTo prepare an statement, provide {prepare: true} in the queryOptions. It will prepare (the first time) and execute the prepared statement.\r\n                                                                                                                     \r\nUsing prepared statements increases performance compared to plain executes, especially for repeated queries. \r\nIt has the additional benefit of providing metadata of the parameters to the driver, \r\n**allowing better type mapping between javascript and Cassandra** without the need of additional info (hints) from the user. \r\n\r\nIn the case the query is already being prepared on a host, it queues the executing of a prepared statement on that\r\nhost until the preparing finished (the driver will not issue a request to prepare statement more than once).\r\n\r\n`callback` should take two arguments err and result.\r\n\r\n`queryOptions` is an Object that may contain the following optional properties:\r\n\r\n- `prepare`: if set, prepares the query (once) and executes the prepared statement.\r\n- `consistency`: the consistency level for the operation (defaults to one).\r\nThe possible consistency levels are defined in `driver.types.consistencies`.\r\n- `fetchSize`: The maximum amount of rows to be retrieved per request (defaults to 5000)\r\n\r\n##### Example: Updating a row\r\n```javascript\r\nvar query = 'UPDATE user_profiles SET birth=? WHERE key=?';\r\nvar queryOptions = {\r\n  consistency: driver.types.consistencies.quorum,\r\n  prepare: true};\r\nvar params = [new Date(1942, 10, 1), 'jimi-hendrix'];\r\nclient.execute(query, params, queryOptions, function(err) {\r\n  if (err) return console.log('Something when wrong', err);\r\n  console.log('Row updated on the cluster');\r\n});\r\n```\r\n\r\n#### client.eachRow(query, [params], [queryOptions], rowCallback, endCallback)\r\n\r\nExecutes a query and streams the rows as soon as they are received.\r\n\r\nIt executes `rowCallback(n, row)` per each row received, where `n` is the index of the row.\r\n\r\nIt executes `callback(err, rowLength)` when all rows have been received or there is an error retrieving the row.\r\n\r\n\r\n##### Example: Reducing a result set\r\n```javascript\r\nclient.eachRow('SELECT time, temperature FROM temperature WHERE station_id=', ['abc'],\r\n  function(n, row) {\r\n    //the callback will be invoked per each row as soon as they are received\r\n    minTemperature = Math.min(row.temperature, minTemperature);\r\n  },\r\n  function (err, rowLength) {\r\n    if (err) console.error(err);\r\n    console.log('%d rows where returned', rowLength);\r\n  }\r\n);\r\n```\r\n\r\n#### client.batch(queries, [queryOptions], callback)\r\n\r\nExecutes batch of queries on an available connection, where `queries` is an Array of string containing the CQL queries\r\n or an Array of objects containing the query and the parameters.\r\n\r\n`callback` should take two arguments err and result.\r\n\r\n#####Example: Update multiple column families\r\n\r\n```javascript\r\nvar userId = driver.types.uuid();\r\nvar messageId = driver.types.uuid();\r\nvar queries = [\r\n  {\r\n    query: 'INSERT INTO users (id, name) values (?, ?)',\r\n    params: [userId, 'jimi-hendrix']\r\n  },\r\n  {\r\n    query: 'INSERT INTO messages (id, user_id, body) values (?, ?, ?)',\r\n    params: [messageId, userId, 'Message from user jimi-hendrix']\r\n  }\r\n];\r\nvar queryOptions: { consistency: driver.types.consistencies.quorum };\r\nclient.batch(queries, queryOptions, function(err) {\r\n  if (err) return console.log('The rows were not inserted', err);\r\n  console.log('Data updated on cluster');\r\n});\r\n```\r\n\r\n#### client.stream(query, [params], [queryOptions])\r\n\r\nExecutes the query and returns a [Readable Streams2](http://nodejs.org/api/stream.html#stream_class_stream_readable) object in `objectMode`.\r\nWhen a row can be read from the stream, it will emit a `readable` event.\r\nIt can be **piped** downstream and provides automatic pause/resume logic (it buffers when not read).\r\n\r\nIt executes `callback(err)` when all rows have been received or there is an error retrieving the row.\r\n\r\n##### Example: Reading the whole result as stream\r\n```javascript\r\nclient.stream('SELECT time1, value1 FROM timeseries WHERE key=', ['key123'])\r\n  .on('readable', function () {\r\n    //readable is emitted as soon a row is received and parsed\r\n    var row;\r\n    while (row = this.read()) {\r\n      console.log('time %s and value %s', row.time1, row.value1);\r\n    }\r\n  })\r\n  .on('end', function () {\r\n    //stream ended, there aren't any more rows\r\n  })\r\n  .on('error', function (err) {\r\n    //Something went wrong: err is a response error from Cassandra\r\n  });\r\n```\r\n\r\n#### client.shutdown([callback])\r\n\r\nDisconnects the pool.\r\n\r\nCloses all connections in the pool. Normally, it should be called once in your application lifetime.\r\n\r\nThe optional `callback` parameter will be executed when the pool is disconnected.\r\n\r\n----\r\n\r\n### types\r\n\r\nThe `types` module contains field definitions that are useful to interact with Cassandra nodes.\r\n\r\n#### consistencies\r\n\r\nObject that contains the CQL consistencies defined as properties. For example: `consistencies.one`, `consistencies.quorum`, ...\r\n\r\n#### dataTypes\r\n\r\nObject that contains all the [CQL data types](http://cassandra.apache.org/doc/cql3/CQL.html#types) defined as properties.\r\n\r\n#### responseErrorCodes\r\n\r\nObject containing all the possible response error codes returned by Cassandra defined as properties.\r\n\r\n#### Long()\r\n\r\nConstructs a 64-bit two's-complement integer. See [Long API Documentation](http://docs.closure-library.googlecode.com/git/class_goog_math_Long.html).\r\n\r\n#### timeuuid()\r\n\r\nFunction to generate a uuid __v1__. It uses [node-uuid][uuid] module to generate and accepts the same arguments.\r\n\r\n#### uuid()\r\n\r\nFunction to generate a uuid __v4__. It uses [node-uuid][uuid] module to generate and accepts the same arguments.\r\n\r\n\r\n### policies\r\n\r\nThe `policies` module contains load balancing, retry and reconnection classes.\r\n\r\n#### loadBalancing\r\n\r\nLoad balancing policies lets you decide which node of the cluster will be used for each query.\r\n\r\n- **RoundRobinPolicy**: This policy yield nodes in a round-robin fashion (default).\r\n- **DCAwareRoundRobinPolicy**: A data-center aware round-robin load balancing policy. This policy provides round-robin \r\nqueries over the node of the local data center. It also includes in the query plans returned a configurable \r\nnumber of hosts in the remote data centers, but those are always tried after the local nodes.\r\n\r\nTo use it, you must provide load balancing policy the instance in the `clientOptions` of the `Client` instance.\r\n\r\n```javascript\r\n//You can specify the local dc relatively to the node.js app\r\nvar localDc = 'us-east';\r\nvar lbPolicy = new driver.policies.loadBalancing.DCAwareRoundRobinPolicy(localDc);\r\nvar clientOptions = {\r\n  policies: {loadBalancing: loadBalancingPolicy}\r\n};\r\nvar client = new driver.Client(clientOptions);\r\n```\r\n\r\nLoad balancing policy classes inherit from **LoadBalancingPolicy**. If you want make your own policy, you should use the same base class.\r\n\r\n#### retry\r\n\r\nRetry policies lets you configure what the driver should do when there certain types of exceptions from Cassandra are received.\r\n\r\n- **RetryPolicy**: Default policy and base class for retry policies. \r\nIt retries once in case there is a read or write timeout and the alive replicas are enough to satisfy the consistency level. \r\n\r\n#### reconnection\r\n\r\nReconnection policies lets you configure when the driver should try to reconnect to a Cassandra node that appears to be down.\r\n\r\n- **ConstantReconnectionPolicy**: It waits a constant time between each reconnection attempt.\r\n- **ExponentialReconnectionPolicy**: waits exponentially longer between each reconnection attempt, until maximum delay is reached. \r\n\r\n### auth\r\n\r\nThe `auth` module provides the classes required for authentication.\r\n\r\n- **PlainTextAuthProvider**: Authentication provider for Cassandra's PasswordAuthenticator.\r\n\r\nUsing an authentication provider on an auth-enabled Cassandra cluster:\r\n\r\n```javascript\r\nvar authProvider = new driver.auth.PlainTextAuthProvider('my_user', 'p@ssword1!');\r\n//Setting the auth provider in the clientOptions\r\nvar client = new driver.Client({authProvider: authProvider});\r\n```\r\n\r\nAuthenticator provider classes inherit from **AuthProvider**. If you want to create your own auth provider, use the that as your base class. \r\n\r\n----\r\n\r\n## Logging\r\n\r\nInstances of `Client()` are `EventEmitter` and emit `log` events:\r\n```javascript\r\nclient.on('log', function(level, className, message, furtherInfo) {\r\n  console.log('log event: %s -- %s', level, message);\r\n});\r\n```\r\nThe `level` being passed to the listener can be `verbose`, `info`, `warning` or `error`.\r\n\r\n## Data types\r\n\r\nCassandra's bigint data types are parsed as [Long][long].\r\n\r\nList / Set datatypes are encoded from / decoded to Javascript Arrays.\r\n\r\nMap datatype are encoded from / decoded to Javascript objects with keys as props.\r\n\r\nDecimal and Varint are not parsed yet, they are yielded as byte Buffers.\r\n\r\n## FAQ\r\n#### Which Cassandra versions does this driver support?\r\nThe beta version of this driver supports any Cassandra version greater than 2.0 and above.\r\nOn future versions, any Cassandra version from 1.2 will be supported.\r\n\r\n#### Which CQL version does this driver support?\r\nIt supports [CQL3](http://cassandra.apache.org/doc/cql3/CQL.html).\r\n\r\n#### Should I create a `Client` instance per repository module?\r\nNormally you should use 1 client instance per application domain, you should share that instance between modules within your application.\r\n\r\n#### Should I shutdown the pool after executing a query?\r\nNo, you should only call `client.shutdown` once in your application lifetime.\r\n\r\n## Credits\r\n\r\nThis driver is based on the original work of [Jorge Bay][jorgebay] on [node-cassandra-cql][old-driver] and adds a series of advanced features that are common across all other [DataStax drivers][drivers] for Apache Cassandra.\r\n\r\nThe development effort to provide an up to date, high performance, fully featured Node.js Driver for Apache Cassandra will continue on this project, while [node-cassandra-cql][old-driver] will be discontinued.\r\n\r\n## License\r\n\r\nCopyright 2014 DataStax\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\r\n\r\n\r\n[uuid]: https://github.com/broofa/node-uuid\r\n[long]: https://github.com/dcodeIO/Long.js\r\n[cassandra]: http://cassandra.apache.org/\r\n[old-driver]: https://github.com/jorgebay/node-cassandra-cql\r\n[jorgebay]: https://github.com/jorgebay\r\n[drivers]: https://github.com/datastax\r\n[mailinglist]: https://groups.google.com/a/lists.datastax.com/forum/#!forum/nodejs-driver-user\r\n[jira]: https://datastax-oss.atlassian.net/browse/NODEJS\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}